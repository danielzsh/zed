#!/usr/bin/env bash

set -euxo pipefail

build_flag="--release"
target_dir="release"
bundle_name=""
zed_crate="zed"


help_info() {
  echo "
Usage: ${0##*/} [options] [bundle_name]
Build the application bundle for Linux.

Options:
  -d    Compile in debug mode
  -h    Display this help and exit
  "
}

while getopts 'dh' flag
do
    case "${flag}" in
        d)
            export CARGO_INCREMENTAL=true
            export CARGO_BUNDLE_SKIP_BUILD=true
            build_flag="";
            target_dir="debug"
            ;;
        h)
           help_info
           exit 0
           ;;
    esac
done

shift $((OPTIND-1))

if [[ $# -gt 0 ]]; then
    if [ "$1" ]; then
        bundle_name=$1
    fi
fi

export ZED_BUNDLE=true

cargo_bundle_version=$(cargo -q bundle --help 2>&1 | head -n 1 || echo "")
if [ "$cargo_bundle_version" != "cargo-bundle v0.6.0-zed" ]; then
    cargo install cargo-bundle --git https://github.com/zed-industries/cargo-bundle.git --branch zed-deploy
fi

echo "Compiling zed binaries"
cargo build ${build_flag} --package ${zed_crate} --package cli

echo "Creating application bundle"
pushd crates/zed
    channel=$(<RELEASE_CHANNEL)
popd

# TODO linux Here, hacks to make `cargo bundle` run work, but macOS does not need these
# Most probably, needs https://github.com/zed-industries/cargo-bundle/commit/9e185bd44d968d8039192220603494555afdbb4f from the upstream.
cp "target/${target_dir}/Zed" "target/${target_dir}/zed"
pushd crates/${zed_crate}
    cp Cargo.toml Cargo.toml.backup
    sed \
        -i.backup -e \
        "s/package.metadata.bundle-${channel}/package.metadata.bundle/" \
        Cargo.toml

    # TODO linux `zed_cli` does not get into this bundle despite being built
    bundle_path=$(cargo bundle ${build_flag} --select-workspace-root | xargs)

    mv Cargo.toml.backup Cargo.toml
popd
echo "Bundled ${bundle_path}"

# TODO kb target/debug/bundle/deb/zed_0.126.0_arm64
# If bundle_name is not set or empty, use the basename of $bundle_path
# if [ -z "$bundle_name" ]; then
#     bundle_name=$(basename "$bundle_path")
# else
#     # If bundle_name doesn't end in .zip, append it
# fi
#
# dmg_target_directory="target/${target_dir}"
# dmg_source_directory="${dmg_target_directory}/dmg"
# dmg_file_path="${dmg_target_directory}/Zed.dmg"
# zip -r target/aa.zip target/release/Zed target/release/cli
